package cool.circuit.circuitAddons.listeners;import cool.circuit.circuitAPI.exceptions.CircuitAPINotSetup;import cool.circuit.circuitAPI.menusystem.Menu;import cool.circuit.circuitAddons.CircuitAddons;import cool.circuit.circuitAddons.games.minecraft.BlockSelection;import cool.circuit.circuitAddons.games.minecraft.MineCraft;import cool.circuit.circuitAddons.games.paintdrying.paintdrying;import cool.circuit.circuitAddons.games.slotguesser.LoseMenu;import cool.circuit.circuitAddons.games.slotguesser.WinMenu;import cool.circuit.circuitAddons.managers.Lootbox;import cool.circuit.circuitAddons.managers.LootboxManager;import cool.circuit.circuitAddons.menusystem.menus.*;import org.bukkit.*;import org.bukkit.enchantments.Enchantment;import org.bukkit.entity.*;import org.bukkit.event.EventHandler;import org.bukkit.event.Listener;import org.bukkit.event.inventory.ClickType;import org.bukkit.event.inventory.InventoryClickEvent;import org.bukkit.inventory.InventoryHolder;import org.bukkit.inventory.ItemStack;import org.bukkit.inventory.meta.EnchantmentStorageMeta;import org.bukkit.inventory.meta.ItemMeta;import org.bukkit.persistence.PersistentDataContainer;import org.bukkit.persistence.PersistentDataType;import java.io.IOException;import java.util.*;import static cool.circuit.circuitAPI.utils.makeItemUtil.makeItem;import static cool.circuit.circuitAddons.CircuitAddons.*;import static cool.circuit.circuitAddons.games.slotguesser.slotguesser.generateLevel;import static cool.circuit.circuitAddons.managers.LootboxManager.*;import static cool.circuit.circuitAddons.managers.LootboxManager.lootboxes;import static cool.circuit.circuitAddons.menusystem.menus.shop.itemsList;import static cool.circuit.circuitAddons.vault.CircuitBanks.saveSettings;import static cool.circuit.circuitAddons.vault.CircuitBanks.updateBanksFile;public class InventoryClickListener implements Listener {    private static final HashMap<UUID, Long> clickCooldowns = new HashMap<>();    private static final long COOLDOWN_TIME = 500; // 2 seconds cooldown    @EventHandler    public void onInventoryClick(InventoryClickEvent event) {        if (!(event.getWhoClicked() instanceof Player player)) {            return;        }        UUID playerUUID = player.getUniqueId();        UUID playerId = player.getUniqueId();        // Prevent players from moving items in the menu        String title = event.getView().getTitle();        int slot = event.getSlot();        if (title.equals("Circuit Addons")) {            main menu = new main(getMenuUtility(player));            try {                menu.handleMenu(event);            } catch (CircuitAPINotSetup e) {                e.printStackTrace();            }            if (slot == 22) {                player.closeInventory();            }            event.setCancelled(true);        } else if (title.equals("Manage")) {            manage menu = new manage(getMenuUtility(player), getMenuUtility(player).getTarget());            try {                menu.handleMenu(event);            } catch (CircuitAPINotSetup e) {                e.printStackTrace();            }            Player target = getMenuUtility(player).getTarget();            if (target == null) {                player.sendMessage(ChatColor.RED + "Target player not found!");                return;            }            if (slot == 4) {                target.kickPlayer(ChatColor.RED + "L BOZO U GOT KICKED");            } else if (slot == 14) {                summonmob menu2 = new summonmob(getMenuUtility(player));                menu2.open();            } else if (slot == 12) {                if (target.getAddress() != null) {                    String ip = target.getAddress().getHostString();                    Bukkit.getBanList(BanList.Type.IP).addBan(ip, ChatColor.DARK_RED + "L BOZO U GOT BANNED", null, null);                    target.kickPlayer(ChatColor.DARK_RED + "L BOZO U GOT BANNED");                } else {                    player.sendMessage(ChatColor.RED + "Cannot ban: Target player has no IP.");                }            } else if (slot == 22) {                player.closeInventory();            }            event.setCancelled(true);        } else if (title.equals("Summoning mob")) {            summonmob menu = new summonmob(getMenuUtility(player));            try {                menu.handleMenu(event);            } catch (CircuitAPINotSetup e) {                e.printStackTrace();            }            ItemStack item = event.getInventory().getItem(0);            Player target = null;            if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName()) {                target = Bukkit.getPlayer(item.getItemMeta().getDisplayName());            }            if (target == null) {                player.sendMessage(ChatColor.RED + "Target player not found or offline!");                return;            }            Location targetLocation = target.getLocation();            if (slot == 22) {                manage menu2 = new manage(getMenuUtility(player), target);                menu2.open();            } else if (slot == 14) {                target.getWorld().spawn(targetLocation, Panda.class);            } else if (slot == 12) {                target.getWorld().spawn(targetLocation, Parrot.class);            } else if (slot == 4) {                Wolf wolf = target.getWorld().spawn(targetLocation, Wolf.class);                wolf.setTamed(true);                wolf.setOwner(target);            }            event.setCancelled(true);        } else if (title.equals("Shop")) {            // Cooldown check            if (clickCooldowns.containsKey(playerUUID)) {                long lastClickTime = clickCooldowns.get(playerUUID);                if (System.currentTimeMillis() - lastClickTime < COOLDOWN_TIME) {                    player.sendMessage(ChatColor.RED + "Please wait before clicking again!");                    clickCooldowns.put(playerUUID, System.currentTimeMillis()); // ✅ Prevents spam                    event.setCancelled(true);                    return;                }            }            // Ensure item exists in shop            Material itemType = event.getCurrentItem().getType();            if (itemsList.keySet().stream().anyMatch(stack -> stack.getType() == itemType)) {                int price = itemsList.entrySet().stream()                        .filter(entry -> entry.getKey().getType() == itemType)                        .map(Map.Entry::getValue)                        .findFirst()                        .orElse(0);                if (getEconomy().bankBalance("bank_" + player.getName()).balance >= price) {                    player.getInventory().addItem(new ItemStack(itemType));  // ✅ Correct item addition                    getEconomy().bankWithdraw("bank_" + player.getName(), price);                    player.sendMessage(ChatColor.GREEN + "You have successfully bought " + itemType + " for " + price + "!");                    // Update last click time                    clickCooldowns.put(playerUUID, System.currentTimeMillis());                } else {                    player.sendMessage(ChatColor.RED + "You don't have enough money to buy this item!");                }            }            updateBanksFile(player);            saveBanks();            saveSettings();            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Slot Guesser | Main")) {            if (slot == 11) {                Objects.requireNonNull(generateLevel(9, player)).open();            } else if (slot == 12) {                Objects.requireNonNull(generateLevel(18, player)).open();            } else if (slot == 13) {                Objects.requireNonNull(generateLevel(27, player)).open();            } else if (slot == 14) {                Objects.requireNonNull(generateLevel(36, player)).open();            } else if (slot == 15) {                Objects.requireNonNull(generateLevel(45, player)).open();            }            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Slot Guesser")) {            if (event.getSlot() == getMenuUtility(player).getSlot()) {                WinMenu menu = new WinMenu(getMenuUtility(player), event.getClickedInventory().getSize());                menu.open();            } else {                LoseMenu menu = new LoseMenu(getMenuUtility(player), event.getClickedInventory().getSize());                menu.open();            }            event.setCancelled(true);        } else if (event.getView().getTitle().equals("You win!")) {            if (slot == 13) {                player.getInventory().addItem(getYouWinDiamond());            }            event.setCancelled(true);        } else if (event.getView().getTitle().equals("You lose!")) {            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Paint Drying Simulator")) {            if (slot == 14) {                Objects.requireNonNull(paintdrying.generateLevel(makeItem(Material.YELLOW_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false),                        makeItem(Material.ORANGE_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false)                        , player)).open();            } else if (slot == 13) {                Objects.requireNonNull(paintdrying.generateLevel(makeItem(Material.BLUE_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false),                        makeItem(Material.LIGHT_BLUE_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false)                        , player)).open();            } else if (slot == 12) {                Objects.requireNonNull(paintdrying.generateLevel(makeItem(Material.GREEN_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false),                        makeItem(Material.LIME_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false)                        , player)).open();            } else if (slot == 11) {                Objects.requireNonNull(paintdrying.generateLevel(makeItem(Material.RED_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false),                        makeItem(Material.ORANGE_STAINED_GLASS_PANE, " ", List.of(), new HashMap<>(), false)                        , player)).open();            }            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Paint Drying")) {            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Claim Win Diamond")) {            if (slot == 13) {                player.getInventory().addItem(getYouWinDiamond());                player.closeInventory();            }            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Minecraft")) {            if (event.getSlot() < 0 || event.getSlot() >= event.getInventory().getSize()) {                return;            }            MineCraft mineCraft = MineCraft.getInstance(player.getUniqueId());            if (mineCraft != null) {                if (slot == 53) {                    mineCraft.moveBackward();                    event.setCancelled(true);                    mineCraft.saveMinecraft();                } else if (slot == 45) {                    mineCraft.moveForward();                    event.setCancelled(true);                    mineCraft.saveMinecraft();                }                if (event.getClick().equals(ClickType.RIGHT) && slot <= 44 && slot != mineCraft.playerSlot) {                    event.getInventory().setItem(slot, mineCraft.currentItem);                    mineCraft.placedItems.put(slot, mineCraft.currentItem);                    mineCraft.airSlots.add(slot);                    mineCraft.update();                    event.setCancelled(true);                    mineCraft.saveMinecraft();                } else if (event.getClick().equals(ClickType.LEFT) && slot >= 0 && slot < 44 && slot != mineCraft.playerSlot) {                    event.getInventory().setItem(slot, new ItemStack(Material.AIR));                    event.setCancelled(true);                    mineCraft.saveMinecraft();                    if (!mineCraft.airSlots.contains(slot)) {                        mineCraft.airSlots.add(slot);                        event.setCancelled(true);                        mineCraft.saveMinecraft();                    }                }                if (slot == 49) {                    BlockSelection menu = new BlockSelection(CircuitAddons.getMenuUtility(player));                    menu.open();                }                event.setCancelled(true);            }        } else if (event.getView().getTitle().equals("Items")) {            MineCraft mineCraft = MineCraft.getInstance(player.getUniqueId());            if (slot == 0) {                mineCraft.open();                return;            }            mineCraft.currentItem = event.getCurrentItem();            mineCraft.saveMinecraft();            event.setCancelled(true);        } else if (event.getView() != null && "Enchanting".equals(event.getView().getTitle())) {            ItemStack clickedItem = event.getCurrentItem();            // Ensure the clicked item is not null or air            if (clickedItem == null || clickedItem.getType() == Material.AIR) {                return;            }            // Check if the item is an enchanted book            if (clickedItem.getType() == Material.ENCHANTED_BOOK) {                ItemMeta meta = clickedItem.getItemMeta();                // Ensure the meta is EnchantmentStorageMeta before casting                if (!(meta instanceof EnchantmentStorageMeta storageMeta)) {                    return;                }                // Check if the book has stored enchantments                if (storageMeta.getStoredEnchants().isEmpty()) {                    return;                }                // Retrieve the first enchantment from stored enchantments                Enchantment enchant = storageMeta.getStoredEnchants().keySet().iterator().next();                currentEnchant = enchant;                currentEnchantLevel = storageMeta.getStoredEnchants().get(enchant);                // Open the enchantment menu                enchanting_template menu = new enchanting_template(getMenuUtility(player), enchant);                menu.open();                event.setCancelled(true);            }            event.setCancelled(true);        } else if (event.getView().getTitle().contains("Enchantment: ")) {            ItemStack clickedItem = event.getCurrentItem();            if (clickedItem == null || clickedItem.getType() == Material.AIR || !clickedItem.hasItemMeta()) {                return;            }            ItemMeta meta = clickedItem.getItemMeta();            PersistentDataContainer container = meta.getPersistentDataContainer();            NamespacedKey key = new NamespacedKey(CircuitAddons.getInstance(), "cost");            if (!container.has(key, PersistentDataType.INTEGER)) {                return;            }            Integer cost = container.get(key, PersistentDataType.INTEGER);            if (cost == null) {                return;            }            currentEnchantLevel = cost / 5;            if (player.getLevel() >= cost) {                player.setLevel(player.getLevel() - cost);                if (player.getInventory().getItemInMainHand().getItemMeta().hasEnchant(currentEnchant)) {                    int existingLevel = player.getInventory().getItemInMainHand().getEnchantmentLevel(currentEnchant);                    if (existingLevel < currentEnchantLevel) {                        player.getInventory().getItemInMainHand().removeEnchantment(currentEnchant);                        player.getInventory().getItemInMainHand().addEnchantment(currentEnchant, currentEnchantLevel);                    } else {                        player.sendMessage(ChatColor.RED + "Your item already has " + formatEnchantName(currentEnchant) + " at Level " + existingLevel + " or higher!");                    }                } else {                    player.getInventory().getItemInMainHand().addEnchantment(currentEnchant, currentEnchantLevel);                }            } else {                player.sendMessage(ChatColor.RED + "You do not have enough levels!");            }            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Quiz | Main Menu")) {            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Quiz")) {            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Loot Box Manager")) {            if (slot == 4) {                //Open the create menu                lootbox_create menu = new lootbox_create(getMenuUtility(player));                menu.open();            } /*else if (slot == 5) {                //Open the delete menu                lootbox_delete menu = new lootbox_delete(getMenuUtility(player));                menu.open();            }*/            event.setCancelled(true);        } else if (event.getView().getTitle().equals("Loot Box Creator")) {            if (slot == 14) {                isInputtingPrice = true;                player.closeInventory();                player.sendMessage(ChatColor.GREEN + "Please input the price of the loot box via /lootbox set price <value>!");            } else if (slot == 13) {                isInputtingName = true;                player.closeInventory();                player.sendMessage(ChatColor.GREEN + "Please input the name of the loot box via /lootbox set name <value>!");            } else if (slot == 12) {                lootbox_rewards menu = new lootbox_rewards(getMenuUtility(player));                menu.open();            } else if (slot == 17) {                String name = lootboxNames.get(playerId);                Integer price = lootboxPrices.get(playerId);                List<ItemStack> rewards = lootboxRewards.get(playerId);                if (name == null || price == null || rewards == null) {                    player.sendMessage(ChatColor.RED + "Error: Lootbox name, price, or rewards are not set properly.");                    event.setCancelled(true);                    return;                }                if (!createLootbox(name, price, rewards.stream().toArray(ItemStack[]::new))) {                    player.sendMessage(ChatColor.RED + "Error: Lootbox could not be created. (You might have too many lootboxes or the name is already taken.)");                }                event.setCancelled(true);            } else if(event.getView().getTitle().equals("Loot Box Rewards")) {                // Check the clicked slot                event.setCancelled(slot > 26 && slot != 31); // Prevent interaction with invalid slots                if (slot == 31) {                    event.setCancelled(true); // Cancel the event for the save button                    List<ItemStack> items = new ArrayList<>();                    // Collect items from slots 0 to 26                    for (int i = 0; i < 27; i++) {                        ItemStack item = event.getInventory().getItem(i);                        if (item != null) { // Null check to avoid adding empty items                            items.add(item);                        }                    }                    // Ensure lootboxRewards map is initialized for the player                    if (!lootboxRewards.containsKey(playerId)) {                        lootboxRewards.put(playerId, new ArrayList<>()); // Initialize if not present                    }                    // Add items to player's lootbox rewards                    lootboxRewards.get(playerId).addAll(items);                    // Open the lootbox_create menu                    lootbox_create menu = new lootbox_create(getMenuUtility(player));                    menu.open();                } else if (event.getView().getTitle().equals("Loot Box Deletion")) {                    String itemName = event.getCurrentItem().getItemMeta().getDisplayName();                    event.setCancelled(true);                    // Handle lootbox deletion                    if (itemName.startsWith(ChatColor.YELLOW.toString())) {                        String lootboxName = itemName.replace(ChatColor.YELLOW + "", "");                        lootboxName = lootboxName.trim(); // Clean up                        String finalLootboxName = lootboxName;                        Lootbox lootbox = lootboxes.stream()                                .filter(lb -> lb.name().equals(finalLootboxName))                                .findFirst()                                .orElse(null);                        if (lootbox != null) {                            // Remove the lootbox                            lootboxes.remove(lootbox);                            player.sendMessage(ChatColor.GREEN + "Lootbox '" + lootboxName + "' has been deleted.");                            player.closeInventory();                        } else {                            player.sendMessage(ChatColor.RED + "Lootbox not found!");                        }                        event.setCancelled(true);                        return;                    }                    // Handle back button                    if (event.getSlot() == 26) {                        // Implement this if you want to go back to the main menu (e.g., lootbox_main)                        player.closeInventory();                        // openMainMenu(); // Uncomment if you have a method to open the main menu.                    }                    event.setCancelled(true); // Cancel the event to prevent moving items                }            }        }    }    private String formatEnchantName(Enchantment enchantment) {        String name = enchantment.getKey().getKey().replace("_", " ").toLowerCase();        return ChatColor.AQUA + name.substring(0, 1).toUpperCase() + name.substring(1);    }}